[{"/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/reportWebVitals.js":"1","/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/index.tsx":"2","/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/App.tsx":"3","/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/state.tsx":"4","/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/contexts/cssGlobal/index.tsx":"5","/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/hooks/responsive/index.tsx":"6"},{"size":362,"mtime":1607997727849,"results":"7","hashOfConfig":"8"},{"size":824,"mtime":1608162350425,"results":"9","hashOfConfig":"8"},{"size":13337,"mtime":1608654202501,"results":"10","hashOfConfig":"8"},{"size":2100,"mtime":1608590581136,"results":"11","hashOfConfig":"8"},{"size":1423,"mtime":1608111978337,"results":"12","hashOfConfig":"8"},{"size":2004,"mtime":1608112025313,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"uesp5h",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"19"},"/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/reportWebVitals.js",[],["29","30"],"/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/index.tsx",[],["31","32"],"/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/App.tsx",["33"],"/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/state.tsx",[],"/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/contexts/cssGlobal/index.tsx",[],"/home/sts/Documents/Workspace/Jobs/stsDev-article-repos/horizontal-scroll-list/src/hooks/responsive/index.tsx",["34","35","36"],"import * as React from 'react' \nimport { UseResponsiveStatusInputType, UseResponsiveStatusOutputType, ScreenSizeStatusType } from './types';\nimport { useCssGlobalContext } from '../../contexts/cssGlobal';\n  \nexport const useResponsive = (): UseResponsiveStatusOutputType => {\n  \n  const cssGlobal = useCssGlobalContext()\n  const [currentScreenSize, setScreenSize] = React.useState<ScreenSizeStatusType>({\n    currentScreenWidth: window.innerWidth,\n    currentScreenHeight: window.innerHeight,\n    isMobileL: window.innerWidth <= cssGlobal.mobileLSize,\n    isTablet: cssGlobal.mobileLSize < window.innerWidth && window.innerWidth <= cssGlobal.tabletSize,\n    isLaptop: cssGlobal.tabletSize < window.innerWidth && window.innerWidth <= cssGlobal.laptopSize,\n    isDesktop: cssGlobal.laptopSize < window.innerWidth,\n    isLTETablet: window.innerWidth <= cssGlobal.tabletSize,\n    isLTELaptop: window.innerWidth <= cssGlobal.laptopSize,\n    isLTEDesktop: window.innerWidth <= cssGlobal.desktopSize,\n  });\n        \n  React.useEffect(() => {   \n    function handleScreenWidth() {\n      setScreenSize({\n        currentScreenWidth: window.innerWidth,\n        currentScreenHeight: window.innerHeight,\n        isMobileL: window.innerWidth <= cssGlobal.mobileLSize,\n        isTablet: cssGlobal.mobileLSize < window.innerWidth && window.innerWidth <= cssGlobal.tabletSize,\n        isLaptop: cssGlobal.tabletSize < window.innerWidth && window.innerWidth <= cssGlobal.laptopSize,\n        isDesktop: cssGlobal.laptopSize < window.innerWidth,\n        isLTETablet: window.innerWidth <= cssGlobal.tabletSize,\n        isLTELaptop: window.innerWidth <= cssGlobal.laptopSize,\n        isLTEDesktop: window.innerWidth <= cssGlobal.desktopSize,\n      });\n    } \n      \n    window.addEventListener(\"resize\", handleScreenWidth);\n      \n    return () => {\n      window.removeEventListener(\"resize\", handleScreenWidth);\n    };\n  }, [  \n      JSON.stringify(currentScreenSize)\n    ]); \n    \n    \n  return currentScreenSize     \n}   \n\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":3,"column":36,"nodeType":"43","messageId":"44","endLine":3,"endColumn":55},{"ruleId":"41","severity":1,"message":"45","line":2,"column":10,"nodeType":"43","messageId":"44","endLine":2,"endColumn":38},{"ruleId":"46","severity":1,"message":"47","line":40,"column":6,"nodeType":"48","endLine":42,"endColumn":6,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":41,"column":7,"nodeType":"51","endLine":41,"endColumn":40},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"@typescript-eslint/no-unused-vars","'backgroundColorList' is defined but never used.","Identifier","unusedVar","'UseResponsiveStatusInputType' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'cssGlobal.desktopSize', 'cssGlobal.laptopSize', 'cssGlobal.mobileLSize', and 'cssGlobal.tabletSize'. Either include them or remove the dependency array.","ArrayExpression",["54"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [cssGlobal.desktopSize, cssGlobal.laptopSize, cssGlobal.mobileLSize, cssGlobal.tabletSize]",{"range":"57","text":"58"},[1903,1952],"[cssGlobal.desktopSize, cssGlobal.laptopSize, cssGlobal.mobileLSize, cssGlobal.tabletSize]"]